/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: message.proto */

#ifndef _LAMB_MESSAGE_H
#define _LAMB_MESSAGE_H

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Submit Submit;
typedef struct _Report Report;
typedef struct _Deliver Deliver;
typedef struct _Schedule Schedule;

/* --- messages --- */

struct  _Submit
{
  ProtobufCMessage base;
  uint64_t id;
  int32_t account;
  int32_t company;
  char *spid;
  char *spcode;
  char *phone;
  int32_t msgfmt;
  int32_t length;
  ProtobufCBinaryData content;
};
#define LAMB_SUBMIT_INIT \
 { PROTOBUF_C_MESSAGE_INIT (&lamb_submit_descriptor) \
    , 0, 0, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, {0,NULL} }


struct  _Report
{
  ProtobufCMessage base;
  uint64_t id;
  int32_t account;
  int32_t company;
  char *spcode;
  char *phone;
  int32_t status;
  char *submittime;
  char *donetime;
};
#define LAMB_REPORT_INIT \
 { PROTOBUF_C_MESSAGE_INIT (&lamb_report_descriptor) \
    , 0, 0, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Deliver
{
  ProtobufCMessage base;
  uint64_t id;
  int32_t account;
  int32_t company;
  char *phone;
  char *spcode;
  char *serviceid;
  int32_t msgfmt;
  int32_t length;
  ProtobufCBinaryData content;
};
#define LAMB_DELIVER_INIT \
 { PROTOBUF_C_MESSAGE_INIT (&lamb_deliver_descriptor) \
    , 0, 0, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, {0,NULL} }


struct  _Schedule
{
  ProtobufCMessage base;
  Submit *message;
  size_t n_channels;
  int32_t *channels;
};
#define LAMB_SCHEDULE_INIT \
 { PROTOBUF_C_MESSAGE_INIT (&lamb_schedule_descriptor) \
    , NULL, 0,NULL }


/* Submit methods */
void   lamb_submit_init
                     (Submit         *message);
size_t lamb_submit_get_packed_size
                     (const Submit   *message);
size_t lamb_submit_pack
                     (const Submit   *message,
                      uint8_t             *out);
size_t lamb_submit_pack_to_buffer
                     (const Submit   *message,
                      ProtobufCBuffer     *buffer);
Submit *
       lamb_submit_unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   lamb_submit_free_unpacked
                     (Submit *message,
                      ProtobufCAllocator *allocator);
/* Report methods */
void   lamb_report_init
                     (Report         *message);
size_t lamb_report_get_packed_size
                     (const Report   *message);
size_t lamb_report_pack
                     (const Report   *message,
                      uint8_t             *out);
size_t lamb_report_pack_to_buffer
                     (const Report   *message,
                      ProtobufCBuffer     *buffer);
Report *
       lamb_report_unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   lamb_report_free_unpacked
                     (Report *message,
                      ProtobufCAllocator *allocator);
/* Deliver methods */
void   lamb_deliver_init
                     (Deliver         *message);
size_t lamb_deliver_get_packed_size
                     (const Deliver   *message);
size_t lamb_deliver_pack
                     (const Deliver   *message,
                      uint8_t             *out);
size_t lamb_deliver_pack_to_buffer
                     (const Deliver   *message,
                      ProtobufCBuffer     *buffer);
Deliver *
       lamb_deliver_unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   lamb_deliver_free_unpacked
                     (Deliver *message,
                      ProtobufCAllocator *allocator);
/* Schedule methods */
void   lamb_schedule_init
                     (Schedule         *message);
size_t lamb_schedule_get_packed_size
                     (const Schedule   *message);
size_t lamb_schedule_pack
                     (const Schedule   *message,
                      uint8_t             *out);
size_t lamb_schedule_pack_to_buffer
                     (const Schedule   *message,
                      ProtobufCBuffer     *buffer);
Schedule *
       lamb_schedule_unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   lamb_schedule_free_unpacked
                     (Schedule *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Submit_Closure)
                 (const Submit *message,
                  void *closure_data);
typedef void (*Report_Closure)
                 (const Report *message,
                  void *closure_data);
typedef void (*Deliver_Closure)
                 (const Deliver *message,
                  void *closure_data);
typedef void (*Schedule_Closure)
                 (const Schedule *message,
                  void *closure_data);

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor lamb_submit_descriptor;
extern const ProtobufCMessageDescriptor lamb_report_descriptor;
extern const ProtobufCMessageDescriptor lamb_deliver_descriptor;
extern const ProtobufCMessageDescriptor lamb_schedule_descriptor;

PROTOBUF_C__END_DECLS


#endif
